
import chwrapper
 
import json

import csv

import re

from fuzzywuzzy import fuzz

from fuzzywuzzy import process
 
from time import sleep

from urllib.error import HTTPError

# --------------------------------------------------------------------------

def getlistofcompanies(orgname, orgnumber, postcode):

	# Remove punctuation from organisation name
	
		searchorg = cleanuporgname(orgname)

		searchnumber = orgnumber

		searchpostcode = postcode
 
	# Make the Companies House request 	
		response = search_client.search_companies(searchorg)
 
		companylist = response.json()["items"]

		if response.status_code == 200: 
			try:
				return companylist
			except HTTPError:	
				sleep(30)
				print ("Trying again")

  

		#if response.status_code == 200:
		#	return companylist
		#except: response.status_code == 502:
		#sleep(30)
		#print ("Trying again")
		

	#code 200 do something - when everything is ok 
	#try: make request if fails then sleep and try. Second try fails then stop. Only return under specific criteria. Return empty list 
 
	#requestnum +=1
 
	#if requestnum>=100:
 
		#sleep(30)
 
		#requestnum = 0

# --------------------------------------------------------------------------
 
def pickbestmatch(companylist, orgname, searchnumber, searchpostcode):
 
	# Pick the best match

	hiscore = -1

	hinamescore = 0

	hipostcodescore = 0

	matchname = ""

	matchnumber = ""

	searchorg = cleanuporgname(orgname)

	# Iterate through all the companies returned by the search

	for company in companylist:

		# Extract the company name

		checkorg = cleanuporgname(company["title"])

		# Extract postcode if there is one

		try:

			checkpostcode = company["address"]["postal_code"]

		except:

			checkpostcode = ""

		# Fuzzy Matching

		# https://chairnerd.seatgeek.com/fuzzywuzzy-fuzzy-string-matching-in-python/	

		# Compare the charity name and the company names

		namescore = fuzz.token_set_ratio(searchorg, checkorg)

		# If the postcode data is missing in either record, then just use the namescore to evaluate

		if searchpostcode =="" or checkpostcode=="":

			postcodescore = 0

			score = namescore	

		else:

			# Otherwise, compare the postcodes

			postcodescore = fuzz.token_set_ratio(searchpostcode, checkpostcode)
 
			# If the name was a perfect match, then just use the namescore
 		
			if namescore == 100:
 
				postcodeweight = 0.25
 
				score = (namescore * (1 - postcodeweight)) + (postcodescore * postcodeweight)
 
				score = round((namescore * (1 - postcodeweight)) + (postcodescore * postcodeweight),2)
 
			else:
 
				postcodeweight = 0.5
 
				score = (namescore * (1 - postcodeweight)) + (postcodescore * postcodeweight)
 
				score = round((namescore * (1 - postcodeweight)) + (postcodescore * postcodeweight),2)
		
		# Now, check to see if this match is the best we have found so far				
 
		if score > hiscore:

			# If it is, keep it

			hiscore=score

			hinamescore = namescore

			hipostcodescore = postcodescore

			matchname = checkorg
 
			matchnumber = "'" + company["company_number"]

	
	lengthscore = round(100 * len(searchorg) / len(matchname)) if len(matchname) > 0 else len(searchorg)
	return hiscore, hinamescore, hipostcodescore, lengthscore, matchname, matchnumber
	#amend to return list plus a numbering for the rank - go through each of them giving them a score, sort the list by the score then return x number of items on the list 
	#run on full data to determine whether it becomes smaller than 274 
	#claire work on the weighting and trimming down the list 
 

# --------------------------------------------------------------------------
 
def cleanuporgname(orgname):
 
	#orgname = 'one, limited two LTD Ltd & three ltd Limited'

	# Removed Limited or Ltd from an organisation's name
 
	cleanorg = re.sub(' ((L|l)(imited|IMITED)|(L|l)(td|TD))',' ', orgname)
 
	# Remove any punctuation from an organisation's name
 
	# https://stackoverflow.com/questions/5843518/remove-all-special-characters-punctuation-and-spaces-from-string
 
	cleanorg = re.sub('\W+',' ', cleanorg)

	#print(cleanorg)
 
	return(cleanorg)
  
# ==================================================================================
 
# Companies House token
tokenPath = "C:/Users/clair/Documents/PhD/Data/ - CompaniesHouseAPI/chapitoken.txt"

tokenFile = open(tokenPath, "r")

chapiToken = tokenFile.read()

print(chapiToken)

search_client = chwrapper.Search(access_token=chapiToken)

# Read in list of charity names and postcodes in CSV format
 
projectpath = "C:/Users/clair/Documents/PhD/Data/CompaniesHouseAPI/"  
 
charityfilepath = projectpath + "charitiesformatchingcompaniesandscios.csv" 
 
csvfile = open(charityfilepath, encoding="utf8")
 
fieldnames = ("charitynumber", "charityname", "registerdate", "knownas", "postcode", "form")

reader = csv.DictReader( csvfile, fieldnames)

# For each charity, get Companies House matches

# The matching strategy is:

#		A name match of 100 is accepted as a match
 
#		Otherwise:

#			If name and postcode are available, match on both with a given weight

#			If only name is available, match on that

# Matching threshold of 78 out of 100
 
threshold = 78
 
# Initialise counters for match rate
 
count_orgs = 0
 
matched_orgs = 0
 
unmatched_orgs = 0

# Output file
 
matchfilepath = projectpath + "matchedcharities.csv"

nomatchfilepath = projectpath + "nonmatchedcharities.csv"

print("Ready to go ...")
 
with open(matchfilepath, 'w', newline='') as matchcsvfile:
 
	with open(nomatchfilepath, 'w', newline='') as nomatchcsvfile:
 
		# Prepare all the output files
 
		outputfieldnames = ("match", "charityname", "charitynumber", "matchscore", "namescore", "postcodescore", "lengthscore","companyname", "companynumber")
 
		writerMatch = csv.DictWriter( matchcsvfile, outputfieldnames)
 
		writerMatch.writeheader()
 
		writerNomatch = csv.DictWriter( nomatchcsvfile, outputfieldnames)

		writerNomatch.writeheader()

		# Work through each charity in the input file

		for row in reader:
 
			orgname = row['charityname']

			orgnumber = row['charitynumber']
 
			postcode = row['postcode']
 
			# Search Companies House by company name
 
			companylist = getlistofcompanies(orgname, orgnumber, postcode)
 
			# From the search results, pick the best one

			hiscore, hinamescore, hipostcodescore, lengthscore, matchname, matchnumber = pickbestmatch(companylist, orgname, orgnumber, postcode)
 
			# Once we have checked all the returned items
 
			# Check if that match was good enough and 
 
			# Output the results into a CSV file
 
			if hiscore >= threshold:
 
				# We got a match!  :D
 
				print("MATCH: ", orgname, '|', matchname, '|', hiscore)
 
				writerMatch.writerow({'match': 'MATCH', 'charityname': orgname, 'charitynumber': orgnumber, 'matchscore': hiscore, 'namescore': hinamescore, 'postcodescore': hipostcodescore,'lengthscore': lengthscore, 'companyname': matchname, 'companynumber': matchnumber})
 
				matched_orgs+=1
 
			else:
 
				# We didn't get a match :(
 
				print("NO MATCH: ", orgname, hiscore, hinamescore, hipostcodescore)
 
				writerNomatch.writerow({'match': 'NO MATCH', 'charityname': orgname, 'charitynumber': orgnumber, 'matchscore': hiscore, 'namescore': hinamescore, 'postcodescore': hipostcodescore, 'lengthscore': lengthscore, 'companyname': matchname, 'companynumber': matchnumber})
 
				unmatched_orgs +=1
 
			# Increment the counter	

			count_orgs+=1

# We're done - report on the overall match rate
 
print('Evaluated', count_orgs, 'charities, with', matched_orgs, 'matched and', unmatched_orgs, 'organisations unmatched.')

print('That is a match rate of', round(100 * matched_orgs/count_orgs),'%.')	

print('Finished.')
